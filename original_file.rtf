{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Light;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red52\green52\blue52;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c26494\c26499\c26494;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl288\slmult1\sa160\partightenfactor0

\f0\fs24 \cf2 import numpy as np\
import matplotlib.pyplot as plt\
\pard\pardeftab720\sl288\slmult1\sa200\partightenfactor0
\cf2 #from mpl_toolkits import mplot3d\
\pard\pardeftab720\sa200\partightenfactor0

\f1 \cf3 import sklearn.datasets\
\
breast_cancer = sklearn.datasets.load_breast_cancer()\
#print(breast_cancer)\
\
x = breast_cancer.data\
y = breast_cancer.target\
#print(x)\
#print(y)\
print(x.shape, y.shape)\
\
import pandas as pd\
data = pd.DataFrame(breast_cancer.data,columns=breast_cancer.feature_names)\
data['class'] = breast_cancer.target\
data.head\
data.describe\
print(breast_cancer.target_names)\
\
\
from sklearn.model_selection import train_test_split\
x_train,y_train,x_test,y_test = train_test_split(x,y)\
#print(y.shape,y_train.shape,y_test.shape)\
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.1)\
#print(y_train.shape,y_test.shape)\
\
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.1,stratify=y)\
#print(y_train.mean(),y_test.mean(),y.mean())\
#print(x_train.mean(),x_test.mean(),x.mean())\
\
#Logistic Regression\
\
from sklearn.linear_model import LogisticRegression\
classififer  = LogisticRegression()\
\
# accuracy of the algorithm\
\
from sklearn.metrics import accuracy_score\
classifier.fit(x_train,y_train)\
prediction = classifier.predict(x_train)\
accuracy = accuracy_score(y_train,prediction)\
print(accuracy)\
\
input_data = (17.99,10.38,122.8,1001,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,1.095,0.9053,8.589,153.4,0.006399,0.04904,0.05373,0.01587,0.03003,0.006193,25.38,17.33,184.6,2019,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189)\
\
# present the data in the form of an array\
input_data_as_numpy_array = np.asarray(input_data)\
print(input_data)\
\
#change the shape of the input data to array using reshape\
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)\
\
prediction = classifier.predict(input_data_reshaped)\
print(prediction) # output is list [0] or [1], where [0] = melignant and [1] = benign\
\
# condition to print the labels\
if(prediction[0]==0):\
  print("MELIGNANT")\
else:\
  print("BENIGN")}